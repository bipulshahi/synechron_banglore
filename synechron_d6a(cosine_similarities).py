# -*- coding: utf-8 -*-
"""synechron_d6a(cosine_similarities).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nBDEj2m6qMtm8HpngJ47ydU6En2Ks3lB
"""

!pip install PyPDF2

import PyPDF2
import numpy as np
import pandas as pd

def extract_data_from_pdf(pdf_path):
  with open(pdf_path , 'rb') as file:
    pdfreader = PyPDF2.PdfReader(file)
    full_text = ''
    for page in pdfreader.pages:
      full_text += page.extract_text()
  return full_text

extracted_text = extract_data_from_pdf('/content/company_manual.pdf')
print(extracted_text)

import re

def clean_text(text):
  #remove extra spaces
  text = re.sub(r'\s+' , ' ' , text)
  #remove non-ascii characters (if any)
  text = re.sub(r'[^\x00-\x7F]+' , '', text)
  return text

cleaned_text = clean_text(extracted_text)
print(cleaned_text)

sections = {
    "About the Company" : cleaned_text.split('About the Company')[1].split('Return Policy')[0],
    "Return Policy" : cleaned_text.split('Return Policy')[1].split('Warranty')[0],
    "Warranty" : cleaned_text.split('Warranty')[1].split('Customer Service')[0],
    "Customer Service" : cleaned_text.split('Customer Service')[1].split('Environmental Commitment')[0],
    "Environmental Commitment" : cleaned_text.split('Environmental Commitment')[1]
}

print(sections)

for section_title,content in sections.items():
  print(f"Section Title: {section_title}")
  print(f"Content: {content}")

from sentence_transformers import SentenceTransformer

#sentence embedding model, good at checking similarity between short text (query vs paragraph)
model = SentenceTransformer('paraphrase-MiniLM-L6-v2')

query = "How to return the product?"
model.encode([query])[0]

print(sections)

#Cosine similarity
def cosine_similarity(a,b):
  return np.dot(a,b)

#Function to search relevant section for a question
def sematic_search(query,sections):
  query_embedding = model.encode([query])[0]

  similarity_score = []

  for title,content in sections.items():
    section_embedding = model.encode([content])[0]
    similarity = cosine_similarity(query_embedding,section_embedding)
    similarity_score.append(similarity)

  return similarity_score

user_query = "Is there any waranty?"
all_similarity_score = sematic_search(user_query,sections)
all_similarity_score

section_title = []
for title,content in sections.items():
  section_title.append(title)

df_similarity = pd.DataFrame(all_similarity_score)
df_similarity.index = section_title
df_similarity

df_similarity.plot.bar(figsize = (12,4))

#Function to search relevant section for a question
def sematic_search(query,sections):
  query_embedding = model.encode([query])[0]
  max_similarity = 0
  relevant_section = None

  for title,content in sections.items():
    section_embedding = model.encode([content])[0]
    similarity = cosine_similarity(query_embedding,section_embedding)
    if similarity > max_similarity:
      max_similarity = similarity
      relevant_section = content

  return relevant_section

#Upload the document
pdf_path = '/content/company_manual.pdf'

document_text = extract_data_from_pdf(pdf_path)

cleaned_text = clean_text(document_text)

sections = {
    "About the Company" : cleaned_text.split('About the Company')[1].split('Return Policy')[0],
    "Return Policy" : cleaned_text.split('Return Policy')[1].split('Warranty')[0],
    "Warranty" : cleaned_text.split('Warranty')[1].split('Customer Service')[0],
    "Customer Service" : cleaned_text.split('Customer Service')[1].split('Environmental Commitment')[0],
    "Environmental Commitment" : cleaned_text.split('Environmental Commitment')[1]
}

#Ask questions interactively
print("Document loaded, You can as k the question about the document uploaded")
print("Type 'exit' to quit")

while True:
  user_input = input("Ask a question")
  if user_input.lower() in ['exit' , 'quit']:
    break
  relevant_content = sematic_search(user_input,sections)
  print("Bot:" , relevant_content)

