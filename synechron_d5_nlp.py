# -*- coding: utf-8 -*-
"""synechron_d5_nlp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18gaypD2soHXA3uInXY9zMRgRAQmea1f0
"""

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics import classification_report
import pandas as pd

# Sample movie reviews with sentiment labels
docs = ["I love this movie", "This movie is terrible",
"Amazing film", "Horrible acting",
"Best movie ever", "Waste of time" , "I hate wasting time"]

# 1=positive, 0=negative
labels = [1, 0, 1, 0, 1, 0 , 0]

# Create feature vectors
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(docs)

print(vectorizer.get_feature_names_out())
df = pd.DataFrame(X.toarray() , columns = vectorizer.get_feature_names_out())
df

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2, random_state=42)


# Train Naive Bayes classifier
model = MultinomialNB()
model.fit(X_train, y_train)

# Test on new review
new_review = ["I hate this film"]
prediction = model.predict(vectorizer.transform(new_review))
print(f"Prediction for '{new_review[0]}': {'Positive' if prediction[0] == 1 else 'Negative'}")

"""**Using Transformer Library**"""

from transformers import pipeline

summarizer = pipeline("summarization", model="facebook/bart-large-cnn")

# Example text to summarize
text = """
Natural Language Processing is a field of artificial intelligence
that enables computers to understand, interpret, and generate human
language. It combines linguistics, computer science, and machine
learning techniques to bridge the gap between human communication
and computer understanding. NLP powers applications like chatbots,
translation services, sentiment analysis tools, and speech recognition
systems that we use every day. As deep learning advances, NLP models
are becoming increasingly sophisticated at understanding context,
nuance, and even humor in human language.
"""

response = summarizer(text, max_length=50, min_length=30, do_sample=False)[0]
print(response['summary_text'])

"""**OCR**"""

!pip install pytesseract

import pytesseract
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np

# Load image containing text
image_path = "/content/testocr.png" # Path to your image
img = Image.open(image_path)

# Extract text from image
text = pytesseract.image_to_string(img)

# Display results
print("Extracted Text:")
print(text)

#Optional: Pre-processing for better OCR results
def preprocess_image(image):
  # Convert to grayscale
  gray = image.convert('L')
  # Binarization (thresholding)
  thresh = np.array(gray) > 150 # Adjust threshold as needed
  binary_img = Image.fromarray(thresh.astype(np.uint8) * 255)
  return binary_img

# Process and extract text from preprocessed image
preprocessed = preprocess_image(img)
improved_text = pytesseract.image_to_string(preprocessed)
print("\nText after preprocessing:")
print(improved_text)

